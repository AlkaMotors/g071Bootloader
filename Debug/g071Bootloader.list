
g071Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d50  08000d50  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d50  08000d50  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000d50  08000d50  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d50  08000d50  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d50  08000d50  00010d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d54  08000d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000018  08000d70  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08000d70  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000599e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000106f  00000000  00000000  000259de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000020c7  00000000  00000000  00026a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000258  00000000  00000000  00028b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006d8  00000000  00000000  00028d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011d74  00000000  00000000  00029448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003375  00000000  00000000  0003b1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00062f95  00000000  00000000  0003e531  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a14c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005ac  00000000  00000000  000a1544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000d38 	.word	0x08000d38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	08000d38 	.word	0x08000d38

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <save_flash_nolib>:
uint32_t FLASH_FKEY1 =0x45670123;
uint32_t FLASH_FKEY2 =0xCDEF89AB;


void save_flash_nolib(uint8_t *data, int length, uint32_t add){
	uint32_t data_to_FLASH[length / 4];
 800021c:	2303      	movs	r3, #3
void save_flash_nolib(uint8_t *data, int length, uint32_t add){
 800021e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000220:	b087      	sub	sp, #28
 8000222:	0016      	movs	r6, r2
	uint32_t data_to_FLASH[length / 4];
 8000224:	466a      	mov	r2, sp
 8000226:	17cc      	asrs	r4, r1, #31
 8000228:	401c      	ands	r4, r3
 800022a:	1864      	adds	r4, r4, r1
 800022c:	10a4      	asrs	r4, r4, #2
 800022e:	00a3      	lsls	r3, r4, #2
 8000230:	330a      	adds	r3, #10
 8000232:	08db      	lsrs	r3, r3, #3
 8000234:	00db      	lsls	r3, r3, #3
 8000236:	1ad3      	subs	r3, r2, r3
void save_flash_nolib(uint8_t *data, int length, uint32_t add){
 8000238:	af00      	add	r7, sp, #0
	uint32_t data_to_FLASH[length / 4];
 800023a:	469d      	mov	sp, r3
 800023c:	466d      	mov	r5, sp
void save_flash_nolib(uint8_t *data, int length, uint32_t add){
 800023e:	6078      	str	r0, [r7, #4]
	memset(data_to_FLASH, 0, length / 4);
 8000240:	0022      	movs	r2, r4
 8000242:	2100      	movs	r1, #0
 8000244:	0028      	movs	r0, r5
 8000246:	f000 fd6f 	bl	8000d28 <memset>
	for(int i = 0; i < length / 4 ; i ++ ){
 800024a:	2100      	movs	r1, #0
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	42a1      	cmp	r1, r4
 8000250:	db46      	blt.n	80002e0 <save_flash_nolib+0xc4>
	}
	volatile uint32_t data_length = length / 4;

	// unlock flash

	while ((FLASH->SR & FLASH_SR_BSY1) != 0) {
 8000252:	4a3b      	ldr	r2, [pc, #236]	; (8000340 <save_flash_nolib+0x124>)
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	0013      	movs	r3, r2
	volatile uint32_t data_length = length / 4;
 8000258:	60fc      	str	r4, [r7, #12]
	while ((FLASH->SR & FLASH_SR_BSY1) != 0) {
 800025a:	0249      	lsls	r1, r1, #9
 800025c:	6910      	ldr	r0, [r2, #16]
 800025e:	4208      	tst	r0, r1
 8000260:	d1fc      	bne.n	800025c <save_flash_nolib+0x40>
	/*  add time-out*/
	}
	if ((FLASH->CR & FLASH_CR_LOCK) != 0) {
 8000262:	6951      	ldr	r1, [r2, #20]
 8000264:	2900      	cmp	r1, #0
 8000266:	da05      	bge.n	8000274 <save_flash_nolib+0x58>
	FLASH->KEYR = FLASH_FKEY1;
 8000268:	4936      	ldr	r1, [pc, #216]	; (8000344 <save_flash_nolib+0x128>)
 800026a:	6809      	ldr	r1, [r1, #0]
 800026c:	6091      	str	r1, [r2, #8]
	FLASH->KEYR = FLASH_FKEY2;
 800026e:	4936      	ldr	r1, [pc, #216]	; (8000348 <save_flash_nolib+0x12c>)
 8000270:	6809      	ldr	r1, [r1, #0]
 8000272:	6091      	str	r1, [r2, #8]
	}

	// erase page if address even divisable by 2048
	 if(add % 2048 == 0){
 8000274:	0572      	lsls	r2, r6, #21
 8000276:	d11d      	bne.n	80002b4 <save_flash_nolib+0x98>
	 FLASH->CR &= ~FLASH_CR_PNB;
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4934      	ldr	r1, [pc, #208]	; (800034c <save_flash_nolib+0x130>)

	FLASH->CR |= FLASH_CR_PER;
	FLASH->CR |= (((add - 0x08000000)/2048)& 0x3F) << 3;
 800027c:	20fc      	movs	r0, #252	; 0xfc
	 FLASH->CR &= ~FLASH_CR_PNB;
 800027e:	400a      	ands	r2, r1
 8000280:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_PER;
 8000282:	2202      	movs	r2, #2
 8000284:	6959      	ldr	r1, [r3, #20]
	FLASH->CR |= (((add - 0x08000000)/2048)& 0x3F) << 3;
 8000286:	0040      	lsls	r0, r0, #1
	FLASH->CR |= FLASH_CR_PER;
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (((add - 0x08000000)/2048)& 0x3F) << 3;
 800028c:	22f8      	movs	r2, #248	; 0xf8
 800028e:	0612      	lsls	r2, r2, #24
 8000290:	18b2      	adds	r2, r6, r2
 8000292:	6959      	ldr	r1, [r3, #20]
 8000294:	0a12      	lsrs	r2, r2, #8
 8000296:	4002      	ands	r2, r0
 8000298:	430a      	orrs	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT;
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	6959      	ldr	r1, [r3, #20]
 80002a0:	0252      	lsls	r2, r2, #9
 80002a2:	4311      	orrs	r1, r2
 80002a4:	6159      	str	r1, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1) != 0){
 80002a6:	6919      	ldr	r1, [r3, #16]
 80002a8:	4211      	tst	r1, r2
 80002aa:	d1fc      	bne.n	80002a6 <save_flash_nolib+0x8a>
	/*  add time-out */
	}

	FLASH->CR &= ~FLASH_CR_PER;
 80002ac:	2102      	movs	r1, #2
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	438a      	bics	r2, r1
 80002b2:	615a      	str	r2, [r3, #20]

	 }
	 FLASH->SR |= 1 << 7;
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	6919      	ldr	r1, [r3, #16]
			  {

	    	FLASH->CR |= FLASH_CR_PG; /* (1) */
	    	*(__IO uint32_t*)(add+write_cnt) = data_to_FLASH[index];
	    	*(__IO uint32_t*)(add+write_cnt+4) = data_to_FLASH[index+1];
	    	while ((FLASH->SR & FLASH_SR_BSY1) != 0){ /*  add time-out  */
 80002b8:	2480      	movs	r4, #128	; 0x80
	 FLASH->SR |= 1 << 7;
 80002ba:	430a      	orrs	r2, r1
 80002bc:	611a      	str	r2, [r3, #16]
	 volatile uint32_t write_cnt=0, index=0;
 80002be:	2200      	movs	r2, #0
	    	while ((FLASH->SR & FLASH_SR_BSY1) != 0){ /*  add time-out  */
 80002c0:	0264      	lsls	r4, r4, #9
	 volatile uint32_t write_cnt=0, index=0;
 80002c2:	613a      	str	r2, [r7, #16]
 80002c4:	617a      	str	r2, [r7, #20]
	    	FLASH->CR |= FLASH_CR_PG; /* (1) */
 80002c6:	3201      	adds	r2, #1
	 while(index < data_length)
 80002c8:	6978      	ldr	r0, [r7, #20]
 80002ca:	68f9      	ldr	r1, [r7, #12]
 80002cc:	4288      	cmp	r0, r1
 80002ce:	d316      	bcc.n	80002fe <save_flash_nolib+0xe2>
	   	 }
	   	 FLASH->CR &= ~FLASH_CR_PG;
				  write_cnt += 8;
				  index +=2;
		  }
	 SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80002d0:	2280      	movs	r2, #128	; 0x80
}
 80002d2:	46bd      	mov	sp, r7
	 SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80002d4:	6959      	ldr	r1, [r3, #20]
 80002d6:	0612      	lsls	r2, r2, #24
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
}
 80002dc:	b007      	add	sp, #28
 80002de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_to_FLASH[i] =  data[i*4+3] << 24 |data[i*4+2] << 16|data[i*4+1] << 8| data[i*4];   // make 16 bit
 80002e0:	78d3      	ldrb	r3, [r2, #3]
 80002e2:	7890      	ldrb	r0, [r2, #2]
 80002e4:	061b      	lsls	r3, r3, #24
 80002e6:	0400      	lsls	r0, r0, #16
 80002e8:	4303      	orrs	r3, r0
 80002ea:	7810      	ldrb	r0, [r2, #0]
 80002ec:	4303      	orrs	r3, r0
 80002ee:	7850      	ldrb	r0, [r2, #1]
 80002f0:	3204      	adds	r2, #4
 80002f2:	0200      	lsls	r0, r0, #8
 80002f4:	4303      	orrs	r3, r0
 80002f6:	0088      	lsls	r0, r1, #2
 80002f8:	502b      	str	r3, [r5, r0]
	for(int i = 0; i < length / 4 ; i ++ ){
 80002fa:	3101      	adds	r1, #1
 80002fc:	e7a7      	b.n	800024e <save_flash_nolib+0x32>
	    	FLASH->CR |= FLASH_CR_PG; /* (1) */
 80002fe:	6959      	ldr	r1, [r3, #20]
 8000300:	4311      	orrs	r1, r2
 8000302:	6159      	str	r1, [r3, #20]
	    	*(__IO uint32_t*)(add+write_cnt) = data_to_FLASH[index];
 8000304:	6978      	ldr	r0, [r7, #20]
 8000306:	6939      	ldr	r1, [r7, #16]
 8000308:	0080      	lsls	r0, r0, #2
 800030a:	5940      	ldr	r0, [r0, r5]
 800030c:	1989      	adds	r1, r1, r6
 800030e:	6008      	str	r0, [r1, #0]
	    	*(__IO uint32_t*)(add+write_cnt+4) = data_to_FLASH[index+1];
 8000310:	6978      	ldr	r0, [r7, #20]
 8000312:	6939      	ldr	r1, [r7, #16]
 8000314:	3001      	adds	r0, #1
 8000316:	0080      	lsls	r0, r0, #2
 8000318:	3104      	adds	r1, #4
 800031a:	5940      	ldr	r0, [r0, r5]
 800031c:	1989      	adds	r1, r1, r6
 800031e:	6008      	str	r0, [r1, #0]
	    	while ((FLASH->SR & FLASH_SR_BSY1) != 0){ /*  add time-out  */
 8000320:	6919      	ldr	r1, [r3, #16]
 8000322:	4221      	tst	r1, r4
 8000324:	d1fc      	bne.n	8000320 <save_flash_nolib+0x104>
	   	 if ((FLASH->SR & FLASH_SR_EOP) != 0){
 8000326:	6919      	ldr	r1, [r3, #16]
	   	 FLASH->SR = FLASH_SR_EOP;
 8000328:	611a      	str	r2, [r3, #16]
	   	 FLASH->CR &= ~FLASH_CR_PG;
 800032a:	6959      	ldr	r1, [r3, #20]
 800032c:	4391      	bics	r1, r2
 800032e:	6159      	str	r1, [r3, #20]
				  write_cnt += 8;
 8000330:	6939      	ldr	r1, [r7, #16]
 8000332:	3108      	adds	r1, #8
 8000334:	6139      	str	r1, [r7, #16]
				  index +=2;
 8000336:	6979      	ldr	r1, [r7, #20]
 8000338:	3102      	adds	r1, #2
 800033a:	6179      	str	r1, [r7, #20]
 800033c:	e7c4      	b.n	80002c8 <save_flash_nolib+0xac>
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	40022000 	.word	0x40022000
 8000344:	20000000 	.word	0x20000000
 8000348:	20000004 	.word	0x20000004
 800034c:	fffffe07 	.word	0xfffffe07

08000350 <read_flash_bin>:
}


void read_flash_bin(uint8_t*  data , uint32_t add , int out_buff_len){
	//volatile uint32_t read_data;
	for (int i = 0; i < out_buff_len ; i ++){
 8000350:	000b      	movs	r3, r1
void read_flash_bin(uint8_t*  data , uint32_t add , int out_buff_len){
 8000352:	b510      	push	{r4, lr}
		data[i] = *(uint8_t*)(add + i);
 8000354:	1a40      	subs	r0, r0, r1
	for (int i = 0; i < out_buff_len ; i ++){
 8000356:	1a5c      	subs	r4, r3, r1
 8000358:	42a2      	cmp	r2, r4
 800035a:	dc00      	bgt.n	800035e <read_flash_bin+0xe>
	}
}
 800035c:	bd10      	pop	{r4, pc}
		data[i] = *(uint8_t*)(add + i);
 800035e:	781c      	ldrb	r4, [r3, #0]
 8000360:	54c4      	strb	r4, [r0, r3]
 8000362:	3301      	adds	r3, #1
 8000364:	e7f7      	b.n	8000356 <read_flash_bin+0x6>
	...

08000368 <LL_IOP_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_IOP_GRP1_EnableClock+0x18>)
{
 800036a:	b082      	sub	sp, #8
  SET_BIT(RCC->IOPENR, Periphs);
 800036c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800036e:	4302      	orrs	r2, r0
 8000370:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000374:	4018      	ands	r0, r3
 8000376:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000378:	9b01      	ldr	r3, [sp, #4]
}
 800037a:	b002      	add	sp, #8
 800037c:	4770      	bx	lr
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	40021000 	.word	0x40021000

08000384 <delayMicroseconds>:
#define HALFBITTIME       500000/BAUDRATE



void delayMicroseconds(uint32_t micros){
	TIM2->CNT = 0;
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	2200      	movs	r2, #0
 8000388:	05db      	lsls	r3, r3, #23
 800038a:	625a      	str	r2, [r3, #36]	; 0x24
	while (TIM2->CNT < micros){
 800038c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800038e:	4282      	cmp	r2, r0
 8000390:	d3fc      	bcc.n	800038c <delayMicroseconds+0x8>

	}
}
 8000392:	4770      	bx	lr

08000394 <jump>:

void jump(){
 8000394:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000396:	b672      	cpsid	i


	__disable_irq();


	JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <jump+0x2c>)
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <jump+0x30>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6013      	str	r3, [r2, #0]
	uint8_t value = *(uint8_t*)(EEPROM_START_ADD);
 80003a0:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <jump+0x34>)
#ifdef USE_ADC_INPUT
#else
	if (value != 0x01){      // check first byte of eeprom to see if its programmed, if not do not jump
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	2a01      	cmp	r2, #1
 80003a6:	d003      	beq.n	80003b0 <jump+0x1c>
		invalid_command = 0;
 80003a8:	2200      	movs	r2, #0
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <jump+0x38>)
 80003ac:	801a      	strh	r2, [r3, #0]

    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
   JumpToApplication();


}
 80003ae:	bd10      	pop	{r4, pc}
    JumpToApplication = (pFunction) JumpAddress;
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <jump+0x3c>)
 80003b2:	6013      	str	r3, [r2, #0]
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <jump+0x40>)
 80003b6:	6812      	ldr	r2, [r2, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003b8:	f382 8808 	msr	MSP, r2
   JumpToApplication();
 80003bc:	4798      	blx	r3
 80003be:	e7f6      	b.n	80003ae <jump+0x1a>
 80003c0:	08001004 	.word	0x08001004
 80003c4:	20000158 	.word	0x20000158
 80003c8:	0801f800 	.word	0x0801f800
 80003cc:	20000042 	.word	0x20000042
 80003d0:	20000268 	.word	0x20000268
 80003d4:	08001000 	.word	0x08001000

080003d8 <makeCrc>:



void makeCrc(uint8_t* pBuff, uint16_t length){
 80003d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static uint8_16_u CRC_16;
		CRC_16.word=0;
 80003da:	2400      	movs	r4, #0

		for(int i = 0; i < length; i++) {
 80003dc:	0005      	movs	r5, r0
 80003de:	0023      	movs	r3, r4


		     uint8_t xb = pBuff[i];
		     for (uint8_t j = 0; j < 8; j++)
		     {
		         if (((xb & 0x01) ^ (CRC_16.word & 0x0001)) !=0 ) {
 80003e0:	2701      	movs	r7, #1
		CRC_16.word=0;
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <makeCrc+0x58>)
void makeCrc(uint8_t* pBuff, uint16_t length){
 80003e4:	9101      	str	r1, [sp, #4]
		CRC_16.word=0;
 80003e6:	7014      	strb	r4, [r2, #0]
 80003e8:	7054      	strb	r4, [r2, #1]
		for(int i = 0; i < length; i++) {
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	1a2e      	subs	r6, r5, r0
 80003ee:	42b1      	cmp	r1, r6
 80003f0:	dc0b      	bgt.n	800040a <makeCrc+0x32>
 80003f2:	2c00      	cmp	r4, #0
 80003f4:	d002      	beq.n	80003fc <makeCrc+0x24>
 80003f6:	7013      	strb	r3, [r2, #0]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	7053      	strb	r3, [r2, #1]
		             CRC_16.word = CRC_16.word >> 1;
		         }
		         xb = xb >> 1;
		     }
		 }
		calculated_crc_low_byte = CRC_16.bytes[0];
 80003fc:	7811      	ldrb	r1, [r2, #0]
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <makeCrc+0x5c>)
 8000400:	7019      	strb	r1, [r3, #0]
		calculated_crc_high_byte = CRC_16.bytes[1];
 8000402:	7852      	ldrb	r2, [r2, #1]
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <makeCrc+0x60>)
 8000406:	701a      	strb	r2, [r3, #0]

}
 8000408:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		     uint8_t xb = pBuff[i];
 800040a:	2408      	movs	r4, #8
 800040c:	782e      	ldrb	r6, [r5, #0]
		         if (((xb & 0x01) ^ (CRC_16.word & 0x0001)) !=0 ) {
 800040e:	0031      	movs	r1, r6
 8000410:	4059      	eors	r1, r3
 8000412:	085b      	lsrs	r3, r3, #1
 8000414:	4239      	tst	r1, r7
 8000416:	d002      	beq.n	800041e <makeCrc+0x46>
		             CRC_16.word = CRC_16.word ^ 0xA001;
 8000418:	4908      	ldr	r1, [pc, #32]	; (800043c <makeCrc+0x64>)
 800041a:	404b      	eors	r3, r1
 800041c:	b29b      	uxth	r3, r3
 800041e:	3c01      	subs	r4, #1
 8000420:	b2e4      	uxtb	r4, r4
		         xb = xb >> 1;
 8000422:	0876      	lsrs	r6, r6, #1
		     for (uint8_t j = 0; j < 8; j++)
 8000424:	2c00      	cmp	r4, #0
 8000426:	d1f2      	bne.n	800040e <makeCrc+0x36>
 8000428:	3501      	adds	r5, #1
 800042a:	003c      	movs	r4, r7
 800042c:	e7dd      	b.n	80003ea <makeCrc+0x12>
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	20000034 	.word	0x20000034
 8000434:	2000015e 	.word	0x2000015e
 8000438:	2000015d 	.word	0x2000015d
 800043c:	ffffa001 	.word	0xffffa001

08000440 <checkCrc>:

char checkCrc(uint8_t* pBuff, uint16_t length){
 8000440:	b570      	push	{r4, r5, r6, lr}

		char received_crc_low_byte2 = pBuff[length];          // one higher than len in buffer
		char received_crc_high_byte2 = pBuff[length+1];
 8000442:	1843      	adds	r3, r0, r1
		char received_crc_low_byte2 = pBuff[length];          // one higher than len in buffer
 8000444:	5c45      	ldrb	r5, [r0, r1]
		char received_crc_high_byte2 = pBuff[length+1];
 8000446:	785c      	ldrb	r4, [r3, #1]
		makeCrc(pBuff,length);
 8000448:	f7ff ffc6 	bl	80003d8 <makeCrc>

		if((calculated_crc_low_byte==received_crc_low_byte2)   && (calculated_crc_high_byte==received_crc_high_byte2)){
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <checkCrc+0x24>)
			return 1;
		}else{
			return 0;
 800044e:	2000      	movs	r0, #0
		if((calculated_crc_low_byte==received_crc_low_byte2)   && (calculated_crc_high_byte==received_crc_high_byte2)){
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	42ab      	cmp	r3, r5
 8000454:	d105      	bne.n	8000462 <checkCrc+0x22>
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <checkCrc+0x28>)
 8000458:	7818      	ldrb	r0, [r3, #0]
 800045a:	1b00      	subs	r0, r0, r4
 800045c:	4243      	negs	r3, r0
 800045e:	4158      	adcs	r0, r3
			return 1;
 8000460:	b2c0      	uxtb	r0, r0
		}
}
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	2000015e 	.word	0x2000015e
 8000468:	2000015d 	.word	0x2000015d

0800046c <setReceive>:


void setReceive(){
 800046c:	b510      	push	{r4, lr}
 800046e:	b086      	sub	sp, #24

}
static void MX_GPIO_INPUT_INIT(void)
{

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000470:	2218      	movs	r2, #24
 8000472:	2100      	movs	r1, #0
 8000474:	4668      	mov	r0, sp
 8000476:	f000 fc57 	bl	8000d28 <memset>
 // LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
  /* GPIO Ports Clock Enable */
#ifdef USE_PB4
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800047a:	2002      	movs	r0, #2
 800047c:	f7ff ff74 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
#endif


  /**/
  GPIO_InitStruct.Pin = input_pin;
 8000480:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000482:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = input_pin;
 8000484:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(input_port, &GPIO_InitStruct);
 8000486:	4669      	mov	r1, sp
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000488:	3b0f      	subs	r3, #15
  LL_GPIO_Init(input_port, &GPIO_InitStruct);
 800048a:	4804      	ldr	r0, [pc, #16]	; (800049c <setReceive+0x30>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800048c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800048e:	9401      	str	r4, [sp, #4]
  LL_GPIO_Init(input_port, &GPIO_InitStruct);
 8000490:	f000 fb63 	bl	8000b5a <LL_GPIO_Init>
received = 0;
 8000494:	4b02      	ldr	r3, [pc, #8]	; (80004a0 <setReceive+0x34>)
 8000496:	601c      	str	r4, [r3, #0]
}
 8000498:	b006      	add	sp, #24
 800049a:	bd10      	pop	{r4, pc}
 800049c:	50000400 	.word	0x50000400
 80004a0:	20000270 	.word	0x20000270

080004a4 <setTransmit>:
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80004a4:	4904      	ldr	r1, [pc, #16]	; (80004b8 <setTransmit+0x14>)
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <setTransmit+0x18>)
 80004a8:	680b      	ldr	r3, [r1, #0]
 80004aa:	401a      	ands	r2, r3
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	4313      	orrs	r3, r2
 80004b2:	600b      	str	r3, [r1, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	50000400 	.word	0x50000400
 80004bc:	fffffcff 	.word	0xfffffcff

080004c0 <serialreadChar>:
{
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
rxbyte=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	4d1c      	ldr	r5, [pc, #112]	; (8000538 <serialreadChar+0x78>)
	if(TIM2->CNT > 200000){
 80004c6:	2080      	movs	r0, #128	; 0x80
rxbyte=0;
 80004c8:	702b      	strb	r3, [r5, #0]
while(!(input_port->IDR & input_pin)){ // wait for rx to go high
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <serialreadChar+0x7c>)
 80004cc:	2210      	movs	r2, #16
 80004ce:	001f      	movs	r7, r3
	if(TIM2->CNT > 200000){
 80004d0:	05c0      	lsls	r0, r0, #23
while(!(input_port->IDR & input_pin)){ // wait for rx to go high
 80004d2:	6919      	ldr	r1, [r3, #16]
 80004d4:	4211      	tst	r1, r2
 80004d6:	d021      	beq.n	800051c <serialreadChar+0x5c>
	if(TIM2->CNT > 250 && messagereceived){
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <serialreadChar+0x80>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	781a      	ldrb	r2, [r3, #0]
while((input_port->IDR & input_pin)){   // wait for it go go low
 80004de:	2310      	movs	r3, #16
	if(TIM2->CNT > 250 && messagereceived){
 80004e0:	05c9      	lsls	r1, r1, #23
while((input_port->IDR & input_pin)){   // wait for it go go low
 80004e2:	693c      	ldr	r4, [r7, #16]
 80004e4:	401c      	ands	r4, r3
 80004e6:	d121      	bne.n	800052c <serialreadChar+0x6c>
delayMicroseconds(HALFBITTIME);//wait to get the center of bit time
 80004e8:	201a      	movs	r0, #26
 80004ea:	f7ff ff4b 	bl	8000384 <delayMicroseconds>
	rxbyte = rxbyte | ((( input_port->IDR & input_pin)) >> shift_amount) << bits_to_read;
 80004ee:	2601      	movs	r6, #1
	delayMicroseconds(BITTIME);
 80004f0:	2034      	movs	r0, #52	; 0x34
 80004f2:	f7ff ff47 	bl	8000384 <delayMicroseconds>
	rxbyte = rxbyte | ((( input_port->IDR & input_pin)) >> shift_amount) << bits_to_read;
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	782a      	ldrb	r2, [r5, #0]
 80004fa:	091b      	lsrs	r3, r3, #4
 80004fc:	4033      	ands	r3, r6
 80004fe:	40a3      	lsls	r3, r4
  bits_to_read++;
 8000500:	3401      	adds	r4, #1
	rxbyte = rxbyte | ((( input_port->IDR & input_pin)) >> shift_amount) << bits_to_read;
 8000502:	4313      	orrs	r3, r2
 8000504:	702b      	strb	r3, [r5, #0]
while (bits_to_read < 8) {
 8000506:	2c08      	cmp	r4, #8
 8000508:	d1f2      	bne.n	80004f0 <serialreadChar+0x30>
delayMicroseconds(HALFBITTIME); //wait till the stop bit time begins
 800050a:	201a      	movs	r0, #26
 800050c:	f7ff ff3a 	bl	8000384 <delayMicroseconds>
messagereceived = 1;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <serialreadChar+0x80>)
receviedByte = rxbyte;
 8000512:	782a      	ldrb	r2, [r5, #0]
messagereceived = 1;
 8000514:	701e      	strb	r6, [r3, #0]
receviedByte = rxbyte;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <serialreadChar+0x84>)
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e006      	b.n	800052a <serialreadChar+0x6a>
	if(TIM2->CNT > 200000){
 800051c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800051e:	490a      	ldr	r1, [pc, #40]	; (8000548 <serialreadChar+0x88>)
 8000520:	428c      	cmp	r4, r1
 8000522:	d9d6      	bls.n	80004d2 <serialreadChar+0x12>
			invalid_command = 101;
 8000524:	2265      	movs	r2, #101	; 0x65
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <serialreadChar+0x8c>)
 8000528:	801a      	strh	r2, [r3, #0]
}
 800052a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(TIM2->CNT > 250 && messagereceived){
 800052c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800052e:	28fa      	cmp	r0, #250	; 0xfa
 8000530:	d9d7      	bls.n	80004e2 <serialreadChar+0x22>
 8000532:	2a00      	cmp	r2, #0
 8000534:	d0d5      	beq.n	80004e2 <serialreadChar+0x22>
 8000536:	e7f8      	b.n	800052a <serialreadChar+0x6a>
 8000538:	20000045 	.word	0x20000045
 800053c:	50000400 	.word	0x50000400
 8000540:	20000044 	.word	0x20000044
 8000544:	2000026e 	.word	0x2000026e
 8000548:	00030d40 	.word	0x00030d40
 800054c:	20000042 	.word	0x20000042

08000550 <serialwriteChar>:
{
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
input_port->BRR = input_pin;; //initiate start bit
 8000552:	2610      	movs	r6, #16
{
 8000554:	0007      	movs	r7, r0
input_port->BRR = input_pin;; //initiate start bit
 8000556:	2508      	movs	r5, #8
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <serialwriteChar+0x34>)
 800055a:	62a6      	str	r6, [r4, #40]	; 0x28
  delayMicroseconds(BITTIME);
 800055c:	2034      	movs	r0, #52	; 0x34
 800055e:	f7ff ff11 	bl	8000384 <delayMicroseconds>
  if (data & 0x01) {
 8000562:	2301      	movs	r3, #1
 8000564:	421f      	tst	r7, r3
 8000566:	d00b      	beq.n	8000580 <serialwriteChar+0x30>
	  input_port->BSRR = input_pin;
 8000568:	61a6      	str	r6, [r4, #24]
 800056a:	3d01      	subs	r5, #1
 800056c:	b2ed      	uxtb	r5, r5
  data = data >> 1;
 800056e:	087f      	lsrs	r7, r7, #1
while (bits_to_read < 8) {
 8000570:	2d00      	cmp	r5, #0
 8000572:	d1f3      	bne.n	800055c <serialwriteChar+0xc>
delayMicroseconds(BITTIME);
 8000574:	2034      	movs	r0, #52	; 0x34
 8000576:	f7ff ff05 	bl	8000384 <delayMicroseconds>
input_port->BSRR = input_pin; //write the stop bit
 800057a:	2310      	movs	r3, #16
 800057c:	61a3      	str	r3, [r4, #24]
}
 800057e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  input_port->BRR = input_pin;
 8000580:	62a6      	str	r6, [r4, #40]	; 0x28
 8000582:	e7f2      	b.n	800056a <serialwriteChar+0x1a>
 8000584:	50000400 	.word	0x50000400

08000588 <send_ACK>:
void send_ACK(){
 8000588:	b510      	push	{r4, lr}
    setTransmit();
 800058a:	f7ff ff8b 	bl	80004a4 <setTransmit>
    serialwriteChar(0x30);             // good ack!
 800058e:	2030      	movs	r0, #48	; 0x30
 8000590:	f7ff ffde 	bl	8000550 <serialwriteChar>
	setReceive();
 8000594:	f7ff ff6a 	bl	800046c <setReceive>
}
 8000598:	bd10      	pop	{r4, pc}

0800059a <sendString>:
void sendString(uint8_t *data, int len){
 800059a:	b570      	push	{r4, r5, r6, lr}
 800059c:	0005      	movs	r5, r0
 800059e:	000e      	movs	r6, r1
	for(int i = 0; i < len; i++){
 80005a0:	0004      	movs	r4, r0
 80005a2:	1b63      	subs	r3, r4, r5
 80005a4:	429e      	cmp	r6, r3
 80005a6:	dc00      	bgt.n	80005aa <sendString+0x10>
}
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
		serialwriteChar(data[i]);
 80005aa:	7820      	ldrb	r0, [r4, #0]
 80005ac:	f7ff ffd0 	bl	8000550 <serialwriteChar>
		delayMicroseconds(BITTIME);
 80005b0:	2034      	movs	r0, #52	; 0x34
 80005b2:	f7ff fee7 	bl	8000384 <delayMicroseconds>
 80005b6:	3401      	adds	r4, #1
 80005b8:	e7f3      	b.n	80005a2 <sendString+0x8>
	...

080005bc <sendDeviceInfo>:
void sendDeviceInfo(){
 80005bc:	b510      	push	{r4, lr}
	setTransmit();
 80005be:	f7ff ff71 	bl	80004a4 <setTransmit>
	sendString(deviceInfo,9);
 80005c2:	2109      	movs	r1, #9
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <sendDeviceInfo+0x14>)
 80005c6:	f7ff ffe8 	bl	800059a <sendString>
	setReceive();
 80005ca:	f7ff ff4f 	bl	800046c <setReceive>
}
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	20000008 	.word	0x20000008

080005d4 <decodeInput>:
void decodeInput(){
 80005d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(incoming_payload_no_command){
 80005d6:	4d9d      	ldr	r5, [pc, #628]	; (800084c <decodeInput+0x278>)
void decodeInput(){
 80005d8:	af00      	add	r7, sp, #0
	if(incoming_payload_no_command){
 80005da:	782b      	ldrb	r3, [r5, #0]
 80005dc:	4c9c      	ldr	r4, [pc, #624]	; (8000850 <decodeInput+0x27c>)
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d01e      	beq.n	8000620 <decodeInput+0x4c>
		len = payload_buffer_size;
 80005e2:	4b9c      	ldr	r3, [pc, #624]	; (8000854 <decodeInput+0x280>)
		if(checkCrc(rxBuffer,len)){
 80005e4:	0020      	movs	r0, r4
		len = payload_buffer_size;
 80005e6:	8819      	ldrh	r1, [r3, #0]
 80005e8:	4b9b      	ldr	r3, [pc, #620]	; (8000858 <decodeInput+0x284>)
 80005ea:	8019      	strh	r1, [r3, #0]
		if(checkCrc(rxBuffer,len)){
 80005ec:	f7ff ff28 	bl	8000440 <checkCrc>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d015      	beq.n	8000620 <decodeInput+0x4c>
			memset(payLoadBuffer, 0, sizeof(payLoadBuffer));             // reset buffer
 80005f4:	2280      	movs	r2, #128	; 0x80
 80005f6:	4e99      	ldr	r6, [pc, #612]	; (800085c <decodeInput+0x288>)
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	2100      	movs	r1, #0
 80005fc:	0030      	movs	r0, r6
 80005fe:	f000 fb93 	bl	8000d28 <memset>
			for(int i = 0; i < len; i++){
 8000602:	4b95      	ldr	r3, [pc, #596]	; (8000858 <decodeInput+0x284>)
 8000604:	881a      	ldrh	r2, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	429a      	cmp	r2, r3
 800060a:	dc05      	bgt.n	8000618 <decodeInput+0x44>
			send_ACK();
 800060c:	f7ff ffbc 	bl	8000588 <send_ACK>
			incoming_payload_no_command = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	702b      	strb	r3, [r5, #0]
}
 8000614:	46bd      	mov	sp, r7
 8000616:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				payLoadBuffer[i]= rxBuffer[i];
 8000618:	5ce1      	ldrb	r1, [r4, r3]
 800061a:	54f1      	strb	r1, [r6, r3]
			for(int i = 0; i < len; i++){
 800061c:	3301      	adds	r3, #1
 800061e:	e7f3      	b.n	8000608 <decodeInput+0x34>
	cmd = rxBuffer[0];
 8000620:	7823      	ldrb	r3, [r4, #0]
 8000622:	4e8f      	ldr	r6, [pc, #572]	; (8000860 <decodeInput+0x28c>)
 8000624:	6033      	str	r3, [r6, #0]
	if(rxBuffer[16] == 0x7d){
 8000626:	7c22      	ldrb	r2, [r4, #16]
 8000628:	2a7d      	cmp	r2, #125	; 0x7d
 800062a:	d10a      	bne.n	8000642 <decodeInput+0x6e>
			if(rxBuffer[12] == 13 && rxBuffer[13] == 66){
 800062c:	7b22      	ldrb	r2, [r4, #12]
 800062e:	2a0d      	cmp	r2, #13
 8000630:	d107      	bne.n	8000642 <decodeInput+0x6e>
 8000632:	7b62      	ldrb	r2, [r4, #13]
 8000634:	2a42      	cmp	r2, #66	; 0x42
 8000636:	d104      	bne.n	8000642 <decodeInput+0x6e>
				sendDeviceInfo();
 8000638:	f7ff ffc0 	bl	80005bc <sendDeviceInfo>
				rxBuffer[20]= 0;
 800063c:	2300      	movs	r3, #0
 800063e:	7523      	strb	r3, [r4, #20]
				return;
 8000640:	e7e8      	b.n	8000614 <decodeInput+0x40>
	if(rxBuffer[20] == 0x7d){
 8000642:	7d22      	ldrb	r2, [r4, #20]
 8000644:	2a7d      	cmp	r2, #125	; 0x7d
 8000646:	d105      	bne.n	8000654 <decodeInput+0x80>
			if(rxBuffer[12] == 13 && rxBuffer[13] == 66){
 8000648:	7b22      	ldrb	r2, [r4, #12]
 800064a:	2a0d      	cmp	r2, #13
 800064c:	d102      	bne.n	8000654 <decodeInput+0x80>
 800064e:	7b62      	ldrb	r2, [r4, #13]
 8000650:	2a42      	cmp	r2, #66	; 0x42
 8000652:	d0f1      	beq.n	8000638 <decodeInput+0x64>
	if(rxBuffer[40] == 0x7d){
 8000654:	0022      	movs	r2, r4
 8000656:	3228      	adds	r2, #40	; 0x28
 8000658:	7812      	ldrb	r2, [r2, #0]
 800065a:	2a7d      	cmp	r2, #125	; 0x7d
 800065c:	d107      	bne.n	800066e <decodeInput+0x9a>
				if(rxBuffer[32] == 13 && rxBuffer[33] == 66){
 800065e:	1c62      	adds	r2, r4, #1
 8000660:	7fd2      	ldrb	r2, [r2, #31]
 8000662:	2a0d      	cmp	r2, #13
 8000664:	d103      	bne.n	800066e <decodeInput+0x9a>
 8000666:	1ca2      	adds	r2, r4, #2
 8000668:	7fd2      	ldrb	r2, [r2, #31]
 800066a:	2a42      	cmp	r2, #66	; 0x42
 800066c:	d0e4      	beq.n	8000638 <decodeInput+0x64>
	if(cmd == CMD_RUN){         // starts the main app
 800066e:	2b00      	cmp	r3, #0
 8000670:	d11e      	bne.n	80006b0 <decodeInput+0xdc>
		if((rxBuffer[1] == 0) && (rxBuffer[2] == 0) && (rxBuffer[3] == 0)){
 8000672:	7863      	ldrb	r3, [r4, #1]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d12f      	bne.n	80006d8 <decodeInput+0x104>
 8000678:	78a3      	ldrb	r3, [r4, #2]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d12c      	bne.n	80006d8 <decodeInput+0x104>
 800067e:	78e3      	ldrb	r3, [r4, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d129      	bne.n	80006d8 <decodeInput+0x104>
		invalid_command = 101;
 8000684:	2265      	movs	r2, #101	; 0x65
 8000686:	4b77      	ldr	r3, [pc, #476]	; (8000864 <decodeInput+0x290>)
 8000688:	801a      	strh	r2, [r3, #0]
	if(cmd == CMD_PROG_EEPROM){
 800068a:	6833      	ldr	r3, [r6, #0]
 800068c:	2b05      	cmp	r3, #5
 800068e:	d123      	bne.n	80006d8 <decodeInput+0x104>
		len = 2;
 8000690:	2102      	movs	r1, #2
 8000692:	4b71      	ldr	r3, [pc, #452]	; (8000858 <decodeInput+0x284>)
		if(checkCrc(rxBuffer,len)){
 8000694:	0020      	movs	r0, r4
		len = 2;
 8000696:	8019      	strh	r1, [r3, #0]
		if(checkCrc(rxBuffer,len)){
 8000698:	f7ff fed2 	bl	8000440 <checkCrc>
 800069c:	2800      	cmp	r0, #0
 800069e:	d01b      	beq.n	80006d8 <decodeInput+0x104>
		save_flash_nolib((uint8_t*)payLoadBuffer, payload_buffer_size,address+65536);
 80006a0:	4b71      	ldr	r3, [pc, #452]	; (8000868 <decodeInput+0x294>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	025b      	lsls	r3, r3, #9
 80006a8:	18d2      	adds	r2, r2, r3
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <decodeInput+0x280>)
 80006ac:	8819      	ldrh	r1, [r3, #0]
 80006ae:	e00d      	b.n	80006cc <decodeInput+0xf8>
	if(cmd == CMD_PROG_FLASH){
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d1ea      	bne.n	800068a <decodeInput+0xb6>
		len = 2;
 80006b4:	2102      	movs	r1, #2
 80006b6:	4b68      	ldr	r3, [pc, #416]	; (8000858 <decodeInput+0x284>)
		if(checkCrc(rxBuffer,len)){
 80006b8:	0020      	movs	r0, r4
		len = 2;
 80006ba:	8019      	strh	r1, [r3, #0]
		if(checkCrc(rxBuffer,len)){
 80006bc:	f7ff fec0 	bl	8000440 <checkCrc>
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d0e2      	beq.n	800068a <decodeInput+0xb6>
			save_flash_nolib((uint8_t*)payLoadBuffer, payload_buffer_size,address);
 80006c4:	4b63      	ldr	r3, [pc, #396]	; (8000854 <decodeInput+0x280>)
 80006c6:	8819      	ldrh	r1, [r3, #0]
 80006c8:	4b67      	ldr	r3, [pc, #412]	; (8000868 <decodeInput+0x294>)
 80006ca:	681a      	ldr	r2, [r3, #0]
		save_flash_nolib((uint8_t*)payLoadBuffer, payload_buffer_size,address+65536);
 80006cc:	4863      	ldr	r0, [pc, #396]	; (800085c <decodeInput+0x288>)
 80006ce:	f7ff fda5 	bl	800021c <save_flash_nolib>
			send_ACK();
 80006d2:	f7ff ff59 	bl	8000588 <send_ACK>
			return;
 80006d6:	e79d      	b.n	8000614 <decodeInput+0x40>
	if(cmd == CMD_SET_ADDRESS){             //  command set addressinput format is: CMD, 00 , High byte address, Low byte address, crclb ,crchb
 80006d8:	6833      	ldr	r3, [r6, #0]
 80006da:	2bff      	cmp	r3, #255	; 0xff
 80006dc:	d12a      	bne.n	8000734 <decodeInput+0x160>
		len = 4;  // package without 2 byte crc
 80006de:	2104      	movs	r1, #4
 80006e0:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <decodeInput+0x284>)
 80006e2:	78a2      	ldrb	r2, [r4, #2]
 80006e4:	8019      	strh	r1, [r3, #0]
 80006e6:	78e3      	ldrb	r3, [r4, #3]
		if(checkCrc((uint8_t*)rxBuffer,len)){
 80006e8:	0020      	movs	r0, r4
 80006ea:	021b      	lsls	r3, r3, #8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	f7ff fea6 	bl	8000440 <checkCrc>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d01d      	beq.n	8000734 <decodeInput+0x160>
			invalid_command = 0;
 80006f8:	2100      	movs	r1, #0
 80006fa:	4a5a      	ldr	r2, [pc, #360]	; (8000864 <decodeInput+0x290>)
		base_address =  (rxBuffer[2] << 8 | rxBuffer[3]) << 2;
 80006fc:	687b      	ldr	r3, [r7, #4]
			invalid_command = 0;
 80006fe:	8011      	strh	r1, [r2, #0]
		base_address =  (rxBuffer[2] << 8 | rxBuffer[3]) << 2;
 8000700:	ba5b      	rev16	r3, r3
			if(base_address >= 0x1000){   // make sure its higher than bootloader always
 8000702:	4a5a      	ldr	r2, [pc, #360]	; (800086c <decodeInput+0x298>)
		base_address =  (rxBuffer[2] << 8 | rxBuffer[3]) << 2;
 8000704:	b29b      	uxth	r3, r3
 8000706:	009b      	lsls	r3, r3, #2
			if(base_address >= 0x1000){   // make sure its higher than bootloader always
 8000708:	4293      	cmp	r3, r2
 800070a:	dd13      	ble.n	8000734 <decodeInput+0x160>
 800070c:	2280      	movs	r2, #128	; 0x80
				if((base_address == 0x1000) || (base_address == 0x1f800)){     // 126 kb mark
 800070e:	2080      	movs	r0, #128	; 0x80
 8000710:	0512      	lsls	r2, r2, #20
 8000712:	1899      	adds	r1, r3, r2
 8000714:	0140      	lsls	r0, r0, #5
 8000716:	4a54      	ldr	r2, [pc, #336]	; (8000868 <decodeInput+0x294>)
 8000718:	4283      	cmp	r3, r0
 800071a:	d003      	beq.n	8000724 <decodeInput+0x150>
 800071c:	20fc      	movs	r0, #252	; 0xfc
 800071e:	0240      	lsls	r0, r0, #9
 8000720:	4283      	cmp	r3, r0
 8000722:	d101      	bne.n	8000728 <decodeInput+0x154>
				address = 0x08000000 + base_address;
 8000724:	6011      	str	r1, [r2, #0]
 8000726:	e7d4      	b.n	80006d2 <decodeInput+0xfe>
				if(address + address_expected_increment >= 0x08000000 + base_address){  // ensure it moves in 256 kb increments or less so no steps are missed
 8000728:	4b51      	ldr	r3, [pc, #324]	; (8000870 <decodeInput+0x29c>)
 800072a:	6810      	ldr	r0, [r2, #0]
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	181b      	adds	r3, r3, r0
 8000730:	428b      	cmp	r3, r1
 8000732:	d2f7      	bcs.n	8000724 <decodeInput+0x150>
	if(cmd == CMD_SET_BUFFER){        // for writing buffer rx buffer 0 = command byte.  command set address, input , format is CMD, 00 , 00 or 01 (if buffer is 256), buffer_size,
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	2bfe      	cmp	r3, #254	; 0xfe
 8000738:	d116      	bne.n	8000768 <decodeInput+0x194>
			len = 4;  // package without 2 byte crc
 800073a:	2104      	movs	r1, #4
 800073c:	4b46      	ldr	r3, [pc, #280]	; (8000858 <decodeInput+0x284>)
            if(checkCrc((uint8_t*)rxBuffer,len)){        // no ack with command set buffer;
 800073e:	0020      	movs	r0, r4
			len = 4;  // package without 2 byte crc
 8000740:	8019      	strh	r1, [r3, #0]
            if(checkCrc((uint8_t*)rxBuffer,len)){        // no ack with command set buffer;
 8000742:	f7ff fe7d 	bl	8000440 <checkCrc>
 8000746:	2800      	cmp	r0, #0
 8000748:	d00e      	beq.n	8000768 <decodeInput+0x194>
 800074a:	2380      	movs	r3, #128	; 0x80
            	if(rxBuffer[2] == 0x01){
 800074c:	78a1      	ldrb	r1, [r4, #2]
 800074e:	4a41      	ldr	r2, [pc, #260]	; (8000854 <decodeInput+0x280>)
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	2901      	cmp	r1, #1
 8000754:	d105      	bne.n	8000762 <decodeInput+0x18e>
            		payload_buffer_size = 256;                          // if nothing in this buffer
 8000756:	8013      	strh	r3, [r2, #0]
	         incoming_payload_no_command = 1;
 8000758:	2201      	movs	r2, #1
 800075a:	702a      	strb	r2, [r5, #0]
	         address_expected_increment = 256;
 800075c:	4a44      	ldr	r2, [pc, #272]	; (8000870 <decodeInput+0x29c>)
		invalid_command++;
 800075e:	8013      	strh	r3, [r2, #0]
 8000760:	e012      	b.n	8000788 <decodeInput+0x1b4>
	         payload_buffer_size = rxBuffer[3];
 8000762:	78e1      	ldrb	r1, [r4, #3]
 8000764:	8011      	strh	r1, [r2, #0]
 8000766:	e7f7      	b.n	8000758 <decodeInput+0x184>
	if(rxBuffer[0] == CMD_KEEP_ALIVE){
 8000768:	7823      	ldrb	r3, [r4, #0]
 800076a:	2bfd      	cmp	r3, #253	; 0xfd
 800076c:	d10f      	bne.n	800078e <decodeInput+0x1ba>
	len = 2;
 800076e:	2102      	movs	r1, #2
 8000770:	4b39      	ldr	r3, [pc, #228]	; (8000858 <decodeInput+0x284>)
	if(checkCrc((uint8_t*)rxBuffer,len)){
 8000772:	0020      	movs	r0, r4
	len = 2;
 8000774:	8019      	strh	r1, [r3, #0]
	if(checkCrc((uint8_t*)rxBuffer,len)){
 8000776:	f7ff fe63 	bl	8000440 <checkCrc>
 800077a:	2800      	cmp	r0, #0
 800077c:	d007      	beq.n	800078e <decodeInput+0x1ba>
		   setTransmit();
 800077e:	f7ff fe91 	bl	80004a4 <setTransmit>
		 		serialwriteChar(0xC1);                // bad command message.
 8000782:	20c1      	movs	r0, #193	; 0xc1
 8000784:	f7ff fee4 	bl	8000550 <serialwriteChar>
 		setReceive();
 8000788:	f7ff fe70 	bl	800046c <setReceive>
 800078c:	e742      	b.n	8000614 <decodeInput+0x40>
	if(cmd == CMD_ERASE_FLASH){
 800078e:	6831      	ldr	r1, [r6, #0]
 8000790:	2902      	cmp	r1, #2
 8000792:	d106      	bne.n	80007a2 <decodeInput+0x1ce>
		len = 2;
 8000794:	4b30      	ldr	r3, [pc, #192]	; (8000858 <decodeInput+0x284>)
		if(checkCrc((uint8_t*)rxBuffer,len)){
 8000796:	0020      	movs	r0, r4
		len = 2;
 8000798:	8019      	strh	r1, [r3, #0]
		if(checkCrc((uint8_t*)rxBuffer,len)){
 800079a:	f7ff fe51 	bl	8000440 <checkCrc>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d197      	bne.n	80006d2 <decodeInput+0xfe>
	if(cmd == CMD_READ_EEPROM){
 80007a2:	6833      	ldr	r3, [r6, #0]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d10b      	bne.n	80007c0 <decodeInput+0x1ec>
eeprom_req = 1;
 80007a8:	2201      	movs	r2, #1
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <decodeInput+0x2a0>)
 80007ac:	701a      	strb	r2, [r3, #0]
    setTransmit();
 80007ae:	f7ff fe79 	bl	80004a4 <setTransmit>
 		serialwriteChar(0xC1);                // bad command message.
 80007b2:	20c1      	movs	r0, #193	; 0xc1
 80007b4:	f7ff fecc 	bl	8000550 <serialwriteChar>
		invalid_command++;
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <decodeInput+0x290>)
 80007ba:	8813      	ldrh	r3, [r2, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	e7ce      	b.n	800075e <decodeInput+0x18a>
	if(cmd == CMD_READ_FLASH_SIL){     // for sending contents of flash memory at the memory location set in bootloader.c need to still set memory with data from set mem command
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d1f4      	bne.n	80007ae <decodeInput+0x1da>
		len = 2;
 80007c4:	2202      	movs	r2, #2
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <decodeInput+0x284>)
 80007c8:	801a      	strh	r2, [r3, #0]
		count++;
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <decodeInput+0x2a4>)
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	6013      	str	r3, [r2, #0]
		uint16_t out_buffer_size = rxBuffer[1];//
 80007d2:	7865      	ldrb	r5, [r4, #1]
		if(out_buffer_size == 0){
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d101      	bne.n	80007dc <decodeInput+0x208>
			out_buffer_size = 256;
 80007d8:	3501      	adds	r5, #1
 80007da:	35ff      	adds	r5, #255	; 0xff
		address_expected_increment = 128;
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <decodeInput+0x29c>)
		if(checkCrc((uint8_t*)rxBuffer,len)){
 80007e0:	2102      	movs	r1, #2
 80007e2:	0020      	movs	r0, r4
		address_expected_increment = 128;
 80007e4:	801a      	strh	r2, [r3, #0]
		if(checkCrc((uint8_t*)rxBuffer,len)){
 80007e6:	f7ff fe2b 	bl	8000440 <checkCrc>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d0df      	beq.n	80007ae <decodeInput+0x1da>
 80007ee:	466b      	mov	r3, sp
 80007f0:	607b      	str	r3, [r7, #4]
			setTransmit();
 80007f2:	f7ff fe57 	bl	80004a4 <setTransmit>
			uint8_t read_data[out_buffer_size + 3];        // make buffer 3 larger to fit CRC and ACK
 80007f6:	002b      	movs	r3, r5
 80007f8:	466a      	mov	r2, sp
 80007fa:	330a      	adds	r3, #10
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	469d      	mov	sp, r3
 8000804:	466e      	mov	r6, sp
 8000806:	1cec      	adds	r4, r5, #3
			memset(read_data, 0, sizeof(read_data));
 8000808:	0022      	movs	r2, r4
 800080a:	2100      	movs	r1, #0
 800080c:	4668      	mov	r0, sp
 800080e:	f000 fa8b 	bl	8000d28 <memset>
			read_flash_bin((uint8_t*)read_data , address, out_buffer_size);
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <decodeInput+0x294>)
 8000814:	002a      	movs	r2, r5
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	4668      	mov	r0, sp
 800081a:	f7ff fd99 	bl	8000350 <read_flash_bin>
            makeCrc(read_data,out_buffer_size);
 800081e:	0029      	movs	r1, r5
 8000820:	4668      	mov	r0, sp
 8000822:	f7ff fdd9 	bl	80003d8 <makeCrc>
            read_data[out_buffer_size] = calculated_crc_low_byte;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <decodeInput+0x2a8>)
            sendString(read_data, out_buffer_size+3);
 8000828:	4668      	mov	r0, sp
            read_data[out_buffer_size] = calculated_crc_low_byte;
 800082a:	781b      	ldrb	r3, [r3, #0]
            sendString(read_data, out_buffer_size+3);
 800082c:	0021      	movs	r1, r4
            read_data[out_buffer_size] = calculated_crc_low_byte;
 800082e:	5573      	strb	r3, [r6, r5]
            read_data[out_buffer_size + 1] = calculated_crc_high_byte;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <decodeInput+0x2ac>)
 8000832:	446d      	add	r5, sp
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	706b      	strb	r3, [r5, #1]
            read_data[out_buffer_size + 2] = 0x30;
 8000838:	2330      	movs	r3, #48	; 0x30
 800083a:	70ab      	strb	r3, [r5, #2]
            sendString(read_data, out_buffer_size+3);
 800083c:	f7ff fead 	bl	800059a <sendString>
			setReceive();
 8000840:	f7ff fe14 	bl	800046c <setReceive>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	469d      	mov	sp, r3
 8000848:	e6e4      	b.n	8000614 <decodeInput+0x40>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	20000041 	.word	0x20000041
 8000850:	2000015f 	.word	0x2000015f
 8000854:	20000048 	.word	0x20000048
 8000858:	2000026c 	.word	0x2000026c
 800085c:	2000004a 	.word	0x2000004a
 8000860:	20000038 	.word	0x20000038
 8000864:	20000042 	.word	0x20000042
 8000868:	2000014c 	.word	0x2000014c
 800086c:	00000fff 	.word	0x00000fff
 8000870:	20000262 	.word	0x20000262
 8000874:	20000040 	.word	0x20000040
 8000878:	2000003c 	.word	0x2000003c
 800087c:	2000015e 	.word	0x2000015e
 8000880:	2000015d 	.word	0x2000015d

08000884 <recieveBuffer>:
void recieveBuffer(){
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(rxBuffer, 0, sizeof(rxBuffer));
 8000886:	2281      	movs	r2, #129	; 0x81
	messagereceived = 0;
 8000888:	2400      	movs	r4, #0
	TIM2->CNT = 0;
 800088a:	2580      	movs	r5, #128	; 0x80
	for(int i = 0; i < sizeof(rxBuffer); i++){
 800088c:	2781      	movs	r7, #129	; 0x81
	memset(rxBuffer, 0, sizeof(rxBuffer));
 800088e:	4e1a      	ldr	r6, [pc, #104]	; (80008f8 <recieveBuffer+0x74>)
	messagereceived = 0;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <recieveBuffer+0x78>)
	memset(rxBuffer, 0, sizeof(rxBuffer));
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	0021      	movs	r1, r4
 8000896:	0030      	movs	r0, r6
	TIM2->CNT = 0;
 8000898:	05ed      	lsls	r5, r5, #23
	messagereceived = 0;
 800089a:	701c      	strb	r4, [r3, #0]
	for(int i = 0; i < sizeof(rxBuffer); i++){
 800089c:	007f      	lsls	r7, r7, #1
	memset(rxBuffer, 0, sizeof(rxBuffer));
 800089e:	f000 fa43 	bl	8000d28 <memset>
	TIM2->CNT = 0;
 80008a2:	626c      	str	r4, [r5, #36]	; 0x24
	serialreadChar();
 80008a4:	f7ff fe0c 	bl	80004c0 <serialreadChar>
	if(incoming_payload_no_command){
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <recieveBuffer+0x7c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00f      	beq.n	80008d0 <recieveBuffer+0x4c>
		if(count == payload_buffer_size+2){
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <recieveBuffer+0x80>)
 80008b2:	4915      	ldr	r1, [pc, #84]	; (8000908 <recieveBuffer+0x84>)
 80008b4:	8812      	ldrh	r2, [r2, #0]
 80008b6:	680b      	ldr	r3, [r1, #0]
 80008b8:	3202      	adds	r2, #2
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d00d      	beq.n	80008da <recieveBuffer+0x56>
		rxBuffer[i] = rxbyte;
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <recieveBuffer+0x88>)
		count++;
 80008c0:	3301      	adds	r3, #1
		rxBuffer[i] = rxbyte;
 80008c2:	7812      	ldrb	r2, [r2, #0]
		count++;
 80008c4:	600b      	str	r3, [r1, #0]
		rxBuffer[i] = rxbyte;
 80008c6:	5532      	strb	r2, [r6, r4]
	for(int i = 0; i < sizeof(rxBuffer); i++){
 80008c8:	3401      	adds	r4, #1
 80008ca:	42bc      	cmp	r4, r7
 80008cc:	d1ea      	bne.n	80008a4 <recieveBuffer+0x20>
 80008ce:	e004      	b.n	80008da <recieveBuffer+0x56>
		if(TIM2->CNT > 250){
 80008d0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80008d2:	2afa      	cmp	r2, #250	; 0xfa
 80008d4:	d904      	bls.n	80008e0 <recieveBuffer+0x5c>
		count = 0;
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <recieveBuffer+0x84>)
 80008d8:	6013      	str	r3, [r2, #0]
		decodeInput();
 80008da:	f7ff fe7b 	bl	80005d4 <decodeInput>
}
 80008de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rxBuffer[i] = rxbyte;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <recieveBuffer+0x88>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	5533      	strb	r3, [r6, r4]
		if(i == 257){
 80008e6:	2302      	movs	r3, #2
 80008e8:	33ff      	adds	r3, #255	; 0xff
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d1ec      	bne.n	80008c8 <recieveBuffer+0x44>
			invalid_command+=20;       // needs one hundred to trigger a jump but will be reset on next set address commmand
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <recieveBuffer+0x8c>)
 80008f0:	8813      	ldrh	r3, [r2, #0]
 80008f2:	3314      	adds	r3, #20
 80008f4:	8013      	strh	r3, [r2, #0]
 80008f6:	e7e7      	b.n	80008c8 <recieveBuffer+0x44>
 80008f8:	2000015f 	.word	0x2000015f
 80008fc:	20000044 	.word	0x20000044
 8000900:	20000041 	.word	0x20000041
 8000904:	20000048 	.word	0x20000048
 8000908:	2000003c 	.word	0x2000003c
 800090c:	20000045 	.word	0x20000045
 8000910:	20000042 	.word	0x20000042

08000914 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000914:	2107      	movs	r1, #7
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <SystemClock_Config+0x90>)
{
 8000918:	b510      	push	{r4, lr}
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	438a      	bics	r2, r1
 800091e:	0011      	movs	r1, r2
 8000920:	2202      	movs	r2, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000926:	2280      	movs	r2, #128	; 0x80
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <SystemClock_Config+0x94>)
 800092c:	0052      	lsls	r2, r2, #1
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	430a      	orrs	r2, r1
 8000932:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	00d2      	lsls	r2, r2, #3
 8000938:	6819      	ldr	r1, [r3, #0]
 800093a:	4211      	tst	r1, r2
 800093c:	d0fc      	beq.n	8000938 <SystemClock_Config+0x24>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	491a      	ldr	r1, [pc, #104]	; (80009ac <SystemClock_Config+0x98>)
 8000942:	4011      	ands	r1, r2
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <SystemClock_Config+0x9c>)
 8000946:	430a      	orrs	r2, r1
 8000948:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	6819      	ldr	r1, [r3, #0]
 800094e:	0452      	lsls	r2, r2, #17
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	68d9      	ldr	r1, [r3, #12]
 8000958:	0552      	lsls	r2, r2, #21
 800095a:	430a      	orrs	r2, r1
 800095c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0492      	lsls	r2, r2, #18
 8000962:	6819      	ldr	r1, [r3, #0]
 8000964:	4211      	tst	r1, r2
 8000966:	d0fc      	beq.n	8000962 <SystemClock_Config+0x4e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	4912      	ldr	r1, [pc, #72]	; (80009b4 <SystemClock_Config+0xa0>)
 800096c:	400a      	ands	r2, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800096e:	2107      	movs	r1, #7
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000970:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	438a      	bics	r2, r1
 8000976:	0011      	movs	r1, r2
 8000978:	2202      	movs	r2, #2
 800097a:	430a      	orrs	r2, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800097c:	2138      	movs	r1, #56	; 0x38
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800097e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	400a      	ands	r2, r1
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000984:	2a10      	cmp	r2, #16
 8000986:	d1fb      	bne.n	8000980 <SystemClock_Config+0x6c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	490b      	ldr	r1, [pc, #44]	; (80009b8 <SystemClock_Config+0xa4>)
  LL_Init1msTick(64000000);
 800098c:	480b      	ldr	r0, [pc, #44]	; (80009bc <SystemClock_Config+0xa8>)
 800098e:	400a      	ands	r2, r1
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	f000 f98f 	bl	8000cb4 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <SystemClock_Config+0xa8>)
 8000998:	f000 f99c 	bl	8000cd4 <LL_SetSystemCoreClock>
  LL_SetSystemCoreClock(64000000);
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <SystemClock_Config+0xa8>)
 800099e:	f000 f999 	bl	8000cd4 <LL_SetSystemCoreClock>
}
 80009a2:	bd10      	pop	{r4, pc}
 80009a4:	40022000 	.word	0x40022000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	1fff808c 	.word	0x1fff808c
 80009b0:	20000802 	.word	0x20000802
 80009b4:	fffff0ff 	.word	0xfffff0ff
 80009b8:	ffff8fff 	.word	0xffff8fff
 80009bc:	03d09000 	.word	0x03d09000

080009c0 <main>:
{
 80009c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  SET_BIT(RCC->APBENR2, Periphs);
 80009c2:	2601      	movs	r6, #1
  SET_BIT(RCC->APBENR1, Periphs);
 80009c4:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->APBENR2, Periphs);
 80009c6:	4c42      	ldr	r4, [pc, #264]	; (8000ad0 <main+0x110>)
 80009c8:	b08b      	sub	sp, #44	; 0x2c
 80009ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
  SET_BIT(RCC->APBENR1, Periphs);
 80009cc:	0549      	lsls	r1, r1, #21
  SET_BIT(RCC->APBENR2, Periphs);
 80009ce:	4333      	orrs	r3, r6
 80009d0:	6423      	str	r3, [r4, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80009d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80009d4:	2510      	movs	r5, #16
 80009d6:	4033      	ands	r3, r6
 80009d8:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80009da:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->APBENR1, Periphs);
 80009dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	af04      	add	r7, sp, #16
 80009e0:	430a      	orrs	r2, r1
 80009e2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80009e4:	2208      	movs	r2, #8
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80009e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009e8:	400b      	ands	r3, r1
 80009ea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009ec:	9b01      	ldr	r3, [sp, #4]
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <main+0x114>)
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	432a      	orrs	r2, r5
 80009fa:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_ACR_PRFTEN;   // prefetch buffer enable
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <main+0x118>)
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	6811      	ldr	r1, [r2, #0]
 8000a04:	430b      	orrs	r3, r1
 8000a06:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 8000a08:	f7ff ff84 	bl	8000914 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	2218      	movs	r2, #24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	0038      	movs	r0, r7
 8000a12:	f000 f989 	bl	8000d28 <memset>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000a16:	0030      	movs	r0, r6
 8000a18:	f7ff fca6 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f7ff fca3 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a24:	9504      	str	r5, [sp, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	4d2d      	ldr	r5, [pc, #180]	; (8000adc <main+0x11c>)
 8000a28:	0039      	movs	r1, r7
 8000a2a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f000 f893 	bl	8000b5a <LL_GPIO_Init>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a34:	2212      	movs	r2, #18
 8000a36:	0010      	movs	r0, r2
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4468      	add	r0, sp
 8000a3c:	f000 f974 	bl	8000d28 <memset>
  SET_BIT(RCC->APBENR1, Periphs);
 8000a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000a42:	0039      	movs	r1, r7
 8000a44:	4333      	orrs	r3, r6
 8000a46:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000a48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a4a:	2480      	movs	r4, #128	; 0x80
 8000a4c:	4033      	ands	r3, r6
 8000a4e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000a50:	9b03      	ldr	r3, [sp, #12]
  TIM_InitStruct.Prescaler = 63;
 8000a52:	233f      	movs	r3, #63	; 0x3f
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000a54:	05e4      	lsls	r4, r4, #23
  TIM_InitStruct.Prescaler = 63;
 8000a56:	803b      	strh	r3, [r7, #0]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000a58:	0020      	movs	r0, r4
  TIM_InitStruct.Autoreload = 0xFFFFFFFF;
 8000a5a:	3b40      	subs	r3, #64	; 0x40
 8000a5c:	60bb      	str	r3, [r7, #8]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000a5e:	f000 f8d9 	bl	8000c14 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	6823      	ldr	r3, [r4, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a66:	491e      	ldr	r1, [pc, #120]	; (8000ae0 <main+0x120>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a68:	4393      	bics	r3, r2
 8000a6a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a6c:	68a3      	ldr	r3, [r4, #8]
	 if( !(input_port->IDR & input_pin)){
 8000a6e:	2710      	movs	r7, #16
 8000a70:	400b      	ands	r3, r1
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a72:	2170      	movs	r1, #112	; 0x70
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a74:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a76:	6863      	ldr	r3, [r4, #4]
 8000a78:	438b      	bics	r3, r1
 8000a7a:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a7c:	68a3      	ldr	r3, [r4, #8]
 8000a7e:	4393      	bics	r3, r2
 8000a80:	60a3      	str	r3, [r4, #8]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	431e      	orrs	r6, r3
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	6026      	str	r6, [r4, #0]
 8000a8a:	26fa      	movs	r6, #250	; 0xfa
 8000a8c:	68ea      	ldr	r2, [r5, #12]
 8000a8e:	4c15      	ldr	r4, [pc, #84]	; (8000ae4 <main+0x124>)
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4022      	ands	r2, r4
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60eb      	str	r3, [r5, #12]
 8000a98:	00b6      	lsls	r6, r6, #2
 8000a9a:	692b      	ldr	r3, [r5, #16]
 8000a9c:	423b      	tst	r3, r7
 8000a9e:	d101      	bne.n	8000aa4 <main+0xe4>
		 jump();
 8000aa0:	f7ff fc78 	bl	8000394 <jump>
	  delayMicroseconds(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	3e01      	subs	r6, #1
 8000aa8:	f7ff fc6c 	bl	8000384 <delayMicroseconds>
  for(int i = 0 ; i < 1000; i ++){
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d1f4      	bne.n	8000a9a <main+0xda>
 8000ab0:	68eb      	ldr	r3, [r5, #12]
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	2480      	movs	r4, #128	; 0x80
 8000ab6:	0064      	lsls	r4, r4, #1
 8000ab8:	431c      	orrs	r4, r3
 8000aba:	60ec      	str	r4, [r5, #12]
	  recieveBuffer();
 8000abc:	f7ff fee2 	bl	8000884 <recieveBuffer>
	  if (invalid_command > 100){
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <main+0x128>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b64      	cmp	r3, #100	; 0x64
 8000ac6:	d9f9      	bls.n	8000abc <main+0xfc>
		  jump();
 8000ac8:	f7ff fc64 	bl	8000394 <jump>
 8000acc:	e7f6      	b.n	8000abc <main+0xfc>
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	50000400 	.word	0x50000400
 8000ae0:	fffebff8 	.word	0xfffebff8
 8000ae4:	fffffcff 	.word	0xfffffcff
 8000ae8:	20000042 	.word	0x20000042

08000aec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aec:	4770      	bx	lr

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler>

08000af0 <SVC_Handler>:
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:
 8000af4:	4770      	bx	lr
	...

08000af8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <SystemInit+0xc>)
 8000afc:	0512      	lsls	r2, r2, #20
 8000afe:	609a      	str	r2, [r3, #8]
#endif
}
 8000b00:	4770      	bx	lr
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b0e:	e003      	b.n	8000b18 <LoopCopyDataInit>

08000b10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b16:	3104      	adds	r1, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopForever+0xe>)
  adds r2, r0, r1
 8000b1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b20:	d3f6      	bcc.n	8000b10 <CopyDataInit>
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b24:	e002      	b.n	8000b2c <LoopFillZerobss>

08000b26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2a:	3204      	adds	r2, #4

08000b2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <LoopForever+0x16>)
  cmp r2, r3
 8000b2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b30:	d3f9      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b32:	f7ff ffe1 	bl	8000af8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b36:	f000 f8d3 	bl	8000ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff ff41 	bl	80009c0 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000b44:	08000d58 	.word	0x08000d58
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b4c:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000b50:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000b54:	20000274 	.word	0x20000274

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>

08000b5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8000b5c:	2700      	movs	r7, #0
 8000b5e:	684b      	ldr	r3, [r1, #4]
{
 8000b60:	b085      	sub	sp, #20
 8000b62:	9301      	str	r3, [sp, #4]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000b64:	680e      	ldr	r6, [r1, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	0033      	movs	r3, r6
 8000b6c:	40fb      	lsrs	r3, r7
 8000b6e:	d10b      	bne.n	8000b88 <LL_GPIO_Init+0x2e>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000b70:	9b02      	ldr	r3, [sp, #8]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d805      	bhi.n	8000b82 <LL_GPIO_Init+0x28>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b76:	6843      	ldr	r3, [r0, #4]
 8000b78:	68ca      	ldr	r2, [r1, #12]
 8000b7a:	43b3      	bics	r3, r6
 8000b7c:	4356      	muls	r6, r2
 8000b7e:	431e      	orrs	r6, r3
 8000b80:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8000b82:	2000      	movs	r0, #0
 8000b84:	b005      	add	sp, #20
 8000b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000b88:	2301      	movs	r3, #1
 8000b8a:	40bb      	lsls	r3, r7
 8000b8c:	4033      	ands	r3, r6
    if (currentpin != 0x00u)
 8000b8e:	d033      	beq.n	8000bf8 <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000b90:	001a      	movs	r2, r3
 8000b92:	2503      	movs	r5, #3
 8000b94:	435a      	muls	r2, r3
 8000b96:	4355      	muls	r5, r2
 8000b98:	43ed      	mvns	r5, r5
 8000b9a:	6804      	ldr	r4, [r0, #0]
 8000b9c:	9500      	str	r5, [sp, #0]
 8000b9e:	402c      	ands	r4, r5
 8000ba0:	9d01      	ldr	r5, [sp, #4]
 8000ba2:	4355      	muls	r5, r2
 8000ba4:	432c      	orrs	r4, r5
 8000ba6:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ba8:	9c02      	ldr	r4, [sp, #8]
 8000baa:	2c01      	cmp	r4, #1
 8000bac:	d80a      	bhi.n	8000bc4 <LL_GPIO_Init+0x6a>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8000bae:	6884      	ldr	r4, [r0, #8]
 8000bb0:	46a4      	mov	ip, r4
 8000bb2:	4665      	mov	r5, ip
 8000bb4:	688c      	ldr	r4, [r1, #8]
 8000bb6:	4354      	muls	r4, r2
 8000bb8:	9403      	str	r4, [sp, #12]
 8000bba:	9c00      	ldr	r4, [sp, #0]
 8000bbc:	4025      	ands	r5, r4
 8000bbe:	9c03      	ldr	r4, [sp, #12]
 8000bc0:	432c      	orrs	r4, r5
 8000bc2:	6084      	str	r4, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000bc4:	68c4      	ldr	r4, [r0, #12]
 8000bc6:	46a4      	mov	ip, r4
 8000bc8:	4665      	mov	r5, ip
 8000bca:	690c      	ldr	r4, [r1, #16]
 8000bcc:	4354      	muls	r4, r2
 8000bce:	9403      	str	r4, [sp, #12]
 8000bd0:	9c00      	ldr	r4, [sp, #0]
 8000bd2:	402c      	ands	r4, r5
 8000bd4:	0025      	movs	r5, r4
 8000bd6:	9c03      	ldr	r4, [sp, #12]
 8000bd8:	4325      	orrs	r5, r4
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000bda:	9c01      	ldr	r4, [sp, #4]
 8000bdc:	60c5      	str	r5, [r0, #12]
 8000bde:	2c02      	cmp	r4, #2
 8000be0:	d10a      	bne.n	8000bf8 <LL_GPIO_Init+0x9e>
 8000be2:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8000be4:	2bff      	cmp	r3, #255	; 0xff
 8000be6:	d809      	bhi.n	8000bfc <LL_GPIO_Init+0xa2>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000be8:	250f      	movs	r5, #15
 8000bea:	4352      	muls	r2, r2
 8000bec:	4355      	muls	r5, r2
 8000bee:	4362      	muls	r2, r4
 8000bf0:	6a03      	ldr	r3, [r0, #32]
 8000bf2:	43ab      	bics	r3, r5
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	6203      	str	r3, [r0, #32]
    pinpos++;
 8000bf8:	3701      	adds	r7, #1
 8000bfa:	e7b6      	b.n	8000b6a <LL_GPIO_Init+0x10>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	435b      	muls	r3, r3
 8000c02:	435b      	muls	r3, r3
 8000c04:	435a      	muls	r2, r3
 8000c06:	4363      	muls	r3, r4
 8000c08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8000c0a:	4395      	bics	r5, r2
 8000c0c:	431d      	orrs	r5, r3
 8000c0e:	6245      	str	r5, [r0, #36]	; 0x24
 8000c10:	e7f2      	b.n	8000bf8 <LL_GPIO_Init+0x9e>
	...

08000c14 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c14:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <LL_TIM_Init+0x84>)
{
 8000c16:	b510      	push	{r4, lr}
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000c18:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d006      	beq.n	8000c2c <LL_TIM_Init+0x18>
 8000c1e:	2480      	movs	r4, #128	; 0x80
 8000c20:	05e4      	lsls	r4, r4, #23
 8000c22:	42a0      	cmp	r0, r4
 8000c24:	d002      	beq.n	8000c2c <LL_TIM_Init+0x18>
 8000c26:	4c1d      	ldr	r4, [pc, #116]	; (8000c9c <LL_TIM_Init+0x88>)
 8000c28:	42a0      	cmp	r0, r4
 8000c2a:	d10c      	bne.n	8000c46 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000c2c:	2470      	movs	r4, #112	; 0x70
 8000c2e:	43a3      	bics	r3, r4
 8000c30:	684c      	ldr	r4, [r1, #4]
 8000c32:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d012      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c38:	2480      	movs	r4, #128	; 0x80
 8000c3a:	05e4      	lsls	r4, r4, #23
 8000c3c:	42a0      	cmp	r0, r4
 8000c3e:	d00e      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c40:	4c16      	ldr	r4, [pc, #88]	; (8000c9c <LL_TIM_Init+0x88>)
 8000c42:	42a0      	cmp	r0, r4
 8000c44:	d00b      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c46:	4c16      	ldr	r4, [pc, #88]	; (8000ca0 <LL_TIM_Init+0x8c>)
 8000c48:	42a0      	cmp	r0, r4
 8000c4a:	d008      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c4c:	4c15      	ldr	r4, [pc, #84]	; (8000ca4 <LL_TIM_Init+0x90>)
 8000c4e:	42a0      	cmp	r0, r4
 8000c50:	d005      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c52:	4c15      	ldr	r4, [pc, #84]	; (8000ca8 <LL_TIM_Init+0x94>)
 8000c54:	42a0      	cmp	r0, r4
 8000c56:	d002      	beq.n	8000c5e <LL_TIM_Init+0x4a>
 8000c58:	4c14      	ldr	r4, [pc, #80]	; (8000cac <LL_TIM_Init+0x98>)
 8000c5a:	42a0      	cmp	r0, r4
 8000c5c:	d103      	bne.n	8000c66 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000c5e:	4c14      	ldr	r4, [pc, #80]	; (8000cb0 <LL_TIM_Init+0x9c>)
 8000c60:	4023      	ands	r3, r4
 8000c62:	68cc      	ldr	r4, [r1, #12]
 8000c64:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000c66:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000c68:	688b      	ldr	r3, [r1, #8]
 8000c6a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000c6c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000c6e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d008      	beq.n	8000c86 <LL_TIM_Init+0x72>
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <LL_TIM_Init+0x90>)
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d005      	beq.n	8000c86 <LL_TIM_Init+0x72>
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <LL_TIM_Init+0x94>)
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	d002      	beq.n	8000c86 <LL_TIM_Init+0x72>
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <LL_TIM_Init+0x98>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d101      	bne.n	8000c8a <LL_TIM_Init+0x76>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000c86:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000c88:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	6942      	ldr	r2, [r0, #20]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8000c92:	2000      	movs	r0, #0
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40012c00 	.word	0x40012c00
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40002000 	.word	0x40002000
 8000ca4:	40014000 	.word	0x40014000
 8000ca8:	40014400 	.word	0x40014400
 8000cac:	40014800 	.word	0x40014800
 8000cb0:	fffffcff 	.word	0xfffffcff

08000cb4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cb4:	21fa      	movs	r1, #250	; 0xfa
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000cb6:	b510      	push	{r4, lr}
 8000cb8:	0089      	lsls	r1, r1, #2
 8000cba:	f7ff fa23 	bl	8000104 <__udivsi3>
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cbe:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <LL_Init1msTick+0x1c>)
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000cc6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc8:	3205      	adds	r2, #5
 8000cca:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000ccc:	bd10      	pop	{r4, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <LL_SetSystemCoreClock+0x8>)
 8000cd6:	6018      	str	r0, [r3, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	20000014 	.word	0x20000014

08000ce0 <__libc_init_array>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	4d0c      	ldr	r5, [pc, #48]	; (8000d18 <__libc_init_array+0x38>)
 8000ce6:	4c0d      	ldr	r4, [pc, #52]	; (8000d1c <__libc_init_array+0x3c>)
 8000ce8:	1b64      	subs	r4, r4, r5
 8000cea:	10a4      	asrs	r4, r4, #2
 8000cec:	42a6      	cmp	r6, r4
 8000cee:	d109      	bne.n	8000d04 <__libc_init_array+0x24>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	f000 f821 	bl	8000d38 <_init>
 8000cf6:	4d0a      	ldr	r5, [pc, #40]	; (8000d20 <__libc_init_array+0x40>)
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <__libc_init_array+0x44>)
 8000cfa:	1b64      	subs	r4, r4, r5
 8000cfc:	10a4      	asrs	r4, r4, #2
 8000cfe:	42a6      	cmp	r6, r4
 8000d00:	d105      	bne.n	8000d0e <__libc_init_array+0x2e>
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	00b3      	lsls	r3, r6, #2
 8000d06:	58eb      	ldr	r3, [r5, r3]
 8000d08:	4798      	blx	r3
 8000d0a:	3601      	adds	r6, #1
 8000d0c:	e7ee      	b.n	8000cec <__libc_init_array+0xc>
 8000d0e:	00b3      	lsls	r3, r6, #2
 8000d10:	58eb      	ldr	r3, [r5, r3]
 8000d12:	4798      	blx	r3
 8000d14:	3601      	adds	r6, #1
 8000d16:	e7f2      	b.n	8000cfe <__libc_init_array+0x1e>
 8000d18:	08000d50 	.word	0x08000d50
 8000d1c:	08000d50 	.word	0x08000d50
 8000d20:	08000d50 	.word	0x08000d50
 8000d24:	08000d54 	.word	0x08000d54

08000d28 <memset>:
 8000d28:	0003      	movs	r3, r0
 8000d2a:	1812      	adds	r2, r2, r0
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <memset+0xa>
 8000d30:	4770      	bx	lr
 8000d32:	7019      	strb	r1, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	e7f9      	b.n	8000d2c <memset+0x4>

08000d38 <_init>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr

08000d44 <_fini>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr
